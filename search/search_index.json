{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Game-Concept of \"Cooler Spielname\" Grundprinzip Ein sich im Kreis drehendes bzw. auf und ab wippendes Objekt muss mit Hilfe einer Art \u201eWaffe\u201c (Wird durch Infrarot Sensoren und LEDs umgesetzt) abgeschossen werden. F\u00fcr jeden Treffer bekommt der Spieler Punkte. Der Spieler, der nach dem Ablauf einer bestimmten Zeit die meisten Punkte besitzt, hat gewonnen. Spielregeln Das Spiel ist f\u00fcr maximal 8 Personen ausgelegt und dauert Pro Runde < > Minuten. Zu beginn jeder Runde wird dem Spieler eine Waffe zugewiesen und die entsprechende Kameraperspektive auf der Surrogate Website angezeigt. Der Spieler kann seine Waffe mittels auf und ab Bewegungen der Maus steuern. Das Schie\u00dfen wird \u00fcber die rechte Maustaste umgesetzt. Ziel ist des die Waffe in die Position zu bringen in der sie am n\u00e4chsten zum drehenden Objekt ist, um dieses auch treffen zu k\u00f6nnen. F\u00fcr jeden Treffer bekommt der Spieler auf sein Punktekonto. Der Spieler, der am Rundenende die meisten Punkte besitzt, hat gewonnen. Erweiterungen Um den Spielspa\u00df zu erh\u00f6hen und das ganze Spiel dynamischer zu gestalten k\u00f6nnen zwei sich drehende Objekte verwendet werden. Die Geschwindigkeit des Objekts wird w\u00e4hrend des Spiels ver\u00e4ndert. Diese wird im fortlaufenden Spiel schneller. PowerUps: Trifft der Spieler das Objekt < > hintereinander bekommt dieses Spiel f\u00fcr < > Sekunden die doppelte Punkte Anzahl f\u00fcr jeden Treffer. Je nachdem wie gut das Objekt getroffen wurde, bekommt der Spieler unterschiedlich viele Punkte (Sensor empfangt unterschiedlich starke Signale je nachdem in welchem Winkel die strahlen reflektiert werden).","title":"Home"},{"location":"#game-concept-of-cooler-spielname","text":"","title":"Game-Concept of \"Cooler Spielname\""},{"location":"#grundprinzip","text":"Ein sich im Kreis drehendes bzw. auf und ab wippendes Objekt muss mit Hilfe einer Art \u201eWaffe\u201c (Wird durch Infrarot Sensoren und LEDs umgesetzt) abgeschossen werden. F\u00fcr jeden Treffer bekommt der Spieler Punkte. Der Spieler, der nach dem Ablauf einer bestimmten Zeit die meisten Punkte besitzt, hat gewonnen.","title":"Grundprinzip"},{"location":"#spielregeln","text":"Das Spiel ist f\u00fcr maximal 8 Personen ausgelegt und dauert Pro Runde < > Minuten. Zu beginn jeder Runde wird dem Spieler eine Waffe zugewiesen und die entsprechende Kameraperspektive auf der Surrogate Website angezeigt. Der Spieler kann seine Waffe mittels auf und ab Bewegungen der Maus steuern. Das Schie\u00dfen wird \u00fcber die rechte Maustaste umgesetzt. Ziel ist des die Waffe in die Position zu bringen in der sie am n\u00e4chsten zum drehenden Objekt ist, um dieses auch treffen zu k\u00f6nnen. F\u00fcr jeden Treffer bekommt der Spieler auf sein Punktekonto. Der Spieler, der am Rundenende die meisten Punkte besitzt, hat gewonnen.","title":"Spielregeln"},{"location":"#erweiterungen","text":"Um den Spielspa\u00df zu erh\u00f6hen und das ganze Spiel dynamischer zu gestalten k\u00f6nnen zwei sich drehende Objekte verwendet werden. Die Geschwindigkeit des Objekts wird w\u00e4hrend des Spiels ver\u00e4ndert. Diese wird im fortlaufenden Spiel schneller. PowerUps: Trifft der Spieler das Objekt < > hintereinander bekommt dieses Spiel f\u00fcr < > Sekunden die doppelte Punkte Anzahl f\u00fcr jeden Treffer. Je nachdem wie gut das Objekt getroffen wurde, bekommt der Spieler unterschiedlich viele Punkte (Sensor empfangt unterschiedlich starke Signale je nachdem in welchem Winkel die strahlen reflektiert werden).","title":"Erweiterungen"},{"location":"coding-style/cpp/","text":"C++ Coding Style Next to consistency as a main aspect of good code, the second most important aspect is a certain style which the average c++ programmer is capable to read and understand properly. Therefore the following documents states the essential naming conventions. Here is a link for a more detailed dive into `c++ core guidelines' Naming conventions Variables The name of a variable should be as accurate as possible and as short as possible at the same time. Example: // don't int x ; x = 10 + 5 ; // do int sum sum = 10 + 5 ; A variable can be used in two different scenarios. Global variables are defined outside of all functions, usually on top of the program. The variable will hold their value throughout the lifetime of the program. Global variables should be defined in a snake_case style, when possible at the start of the file. Example: int global_variable ; Local variables are defined, initially set and consumed within a function, method or block. These variables lifetime is confined within the lifetime (time of execution) of a function (method or block). Local variables should be defined the same way as global variables. The main difference for local variables is a defined prefix m_ . m_ stands for \"member\" data. int m_local_variable ; Constants & Preprocessor Values Constants are expressions with a fixed value. They are defined with the key `const. The naming convention for constants and preprocessor values prescribes that all letters are upper case letters with snake case subdivision Example: #define PI_VALUE 3.14159 const int PI_VALUE = 3.14159 ; Functions Functions can be written as non-returning and returning type. They should start with a lower case letter. The following word should be upper case . This method is called camelCase Example: void exampleFuntion () { // do some stuff } Classes (Types, Template parameters) C++ is a object-oriented programming language. Therefore it's all about creating objects which contain both data and functions for a certain task. A class as well as an object should be defined with PascalCase notation. Example: class Car { public : string brand ; int max_speed ; int power ; Car ( string ini_brand , int ini_speed , ini_power ){ brand = ini_brand ; max_speed = ini_speed ; power = ini_power ; } private : int m_current_speed ; }; void GeneralCar::setSpeed ( int new_speed ){ m_current_speed = new_speed ; } int main (){ // declaration of two objects Car car1 ( \"Auto1\" , 200 , 100 ); Car car2 ( \"Auto2\" , 300 , 200 ); //setting the speed car1 . setSpeed ( 250 ); return 0 ; } Comments If the section of code is not clearly understandable there should be a short description of the current function in form of a comment. Example // divides up two double values double division ( double dividend , double divisor ){ return ( dividend / divisor ); } Documentation: The documentation of the written code is created automatically. To provide the needed Information every function, class or method needs a descriptive block comment ( /** */ ) with a special format. For a detailed explanation click here Example: /** <Description> @param some_variable <Description of some_variable> @return <Description> */ int someFunction ( char some_variable ) { } Head of File: In order to get quick information about the .cpp and .hpp files purpose there should be a Header comment included. Therefor the /** */ format of commenting should be used. Example: /** <Short description of the files function> Projekt: <Name of the Projekt> Author: <Authors Name> Date of Creation: <Date> */","title":"C++"},{"location":"coding-style/cpp/#c-coding-style","text":"Next to consistency as a main aspect of good code, the second most important aspect is a certain style which the average c++ programmer is capable to read and understand properly. Therefore the following documents states the essential naming conventions. Here is a link for a more detailed dive into `c++ core guidelines'","title":"C++ Coding Style"},{"location":"coding-style/cpp/#naming-conventions","text":"","title":"Naming conventions"},{"location":"coding-style/cpp/#variables","text":"The name of a variable should be as accurate as possible and as short as possible at the same time. Example: // don't int x ; x = 10 + 5 ; // do int sum sum = 10 + 5 ; A variable can be used in two different scenarios. Global variables are defined outside of all functions, usually on top of the program. The variable will hold their value throughout the lifetime of the program. Global variables should be defined in a snake_case style, when possible at the start of the file. Example: int global_variable ; Local variables are defined, initially set and consumed within a function, method or block. These variables lifetime is confined within the lifetime (time of execution) of a function (method or block). Local variables should be defined the same way as global variables. The main difference for local variables is a defined prefix m_ . m_ stands for \"member\" data. int m_local_variable ;","title":"Variables"},{"location":"coding-style/cpp/#constants-preprocessor-values","text":"Constants are expressions with a fixed value. They are defined with the key `const. The naming convention for constants and preprocessor values prescribes that all letters are upper case letters with snake case subdivision Example: #define PI_VALUE 3.14159 const int PI_VALUE = 3.14159 ;","title":"Constants &amp; Preprocessor Values"},{"location":"coding-style/cpp/#functions","text":"Functions can be written as non-returning and returning type. They should start with a lower case letter. The following word should be upper case . This method is called camelCase Example: void exampleFuntion () { // do some stuff }","title":"Functions"},{"location":"coding-style/cpp/#classes-types-template-parameters","text":"C++ is a object-oriented programming language. Therefore it's all about creating objects which contain both data and functions for a certain task. A class as well as an object should be defined with PascalCase notation. Example: class Car { public : string brand ; int max_speed ; int power ; Car ( string ini_brand , int ini_speed , ini_power ){ brand = ini_brand ; max_speed = ini_speed ; power = ini_power ; } private : int m_current_speed ; }; void GeneralCar::setSpeed ( int new_speed ){ m_current_speed = new_speed ; } int main (){ // declaration of two objects Car car1 ( \"Auto1\" , 200 , 100 ); Car car2 ( \"Auto2\" , 300 , 200 ); //setting the speed car1 . setSpeed ( 250 ); return 0 ; }","title":"Classes (Types, Template parameters)"},{"location":"coding-style/cpp/#comments","text":"If the section of code is not clearly understandable there should be a short description of the current function in form of a comment. Example // divides up two double values double division ( double dividend , double divisor ){ return ( dividend / divisor ); } Documentation: The documentation of the written code is created automatically. To provide the needed Information every function, class or method needs a descriptive block comment ( /** */ ) with a special format. For a detailed explanation click here Example: /** <Description> @param some_variable <Description of some_variable> @return <Description> */ int someFunction ( char some_variable ) { } Head of File: In order to get quick information about the .cpp and .hpp files purpose there should be a Header comment included. Therefor the /** */ format of commenting should be used. Example: /** <Short description of the files function> Projekt: <Name of the Projekt> Author: <Authors Name> Date of Creation: <Date> */","title":"Comments"},{"location":"coding-style/git/","text":"GIT Commit Style In order to achieve a uniform naming for commit messages the following commit style should be used when creating a new commit message. Keyword Description ADD Is used if there is a new change in the code. e.g. git commit -m \"ADD function XY()\" REMOVE Is used whenever a major part of the code is removed. This scenario should be rater infrequent. e.g. git commit -m \"REMOVE variable XY\" FIX Used for minor changes of an already existing part of the code. e.g git commit -m \"FIX functionality of XY\" UPDATE Is used when there is a major change in multiple code-segments. e.g git commit -m \"UPDATE setup of analog sensors\" Branch Setup There is more to come","title":"GIT"},{"location":"coding-style/git/#git","text":"","title":"GIT"},{"location":"coding-style/git/#commit-style","text":"In order to achieve a uniform naming for commit messages the following commit style should be used when creating a new commit message. Keyword Description ADD Is used if there is a new change in the code. e.g. git commit -m \"ADD function XY()\" REMOVE Is used whenever a major part of the code is removed. This scenario should be rater infrequent. e.g. git commit -m \"REMOVE variable XY\" FIX Used for minor changes of an already existing part of the code. e.g git commit -m \"FIX functionality of XY\" UPDATE Is used when there is a major change in multiple code-segments. e.g git commit -m \"UPDATE setup of analog sensors\"","title":"Commit Style"},{"location":"coding-style/git/#branch-setup","text":"There is more to come","title":"Branch Setup"},{"location":"coding-style/python/","text":"Python Coding Style Next to consistency as a main aspect of good code, the second most important aspect is a certain style which the average python programmer is capable to read and understand properly. Therefore the following documents states the essential naming conventions. Here is a link for a more detailed dive into the `PEP8 - Style Guide for Python Code' Naming conventions Variables The name of a variable should be as accurate as possible and as short as possible at the same time. Example: # don't x x = 10 + 5 # do res res = 10 + 5 A variable can be used in two different scenarios. Global variables are defined outside of all functions, usually on top of the program. They should only be used if absolutely necessary. A global variable will hold their value throughout the lifetime of the program. Global variables should be defined in a snake_case style, when possible at the start of the file. If the variable should only be used in it's module the name should start and end with two underscores. Example: global_variable __private_global_variable__ Local variables are defined, initially set and consumed within a function, method or block. These variables lifetime is confined within the lifetime (time of execution) of a function (method or block). Local variables should be defined the same way as global variables. local_variable Constants Constants are expressions with a fixed value. They are defined on a global (modul) level. The naming convention for constants prescribes that all letters are upper case letters with snake case subdivision Example: PI_VALUE = 3.14159 Functions Functions should be named in snake_case like variables. Eventhough Python isn't strictly typesafe it ist good practice to define a return-type and the type of the parameters Example: def example_function ( some_value : int ) -> bool : # do some stuff Classes (Types, Template parameters) Python is a object-oriented programming language. Therefore it's all about creating objects which contain both data and functions for a certain task. A class as well as an object should be defined with PascalCase notation. Methods and Attributes: The first parameter of the __init__ function should always be called self . Private methods or attributes always start with two underscores. Example: class Car : brand max_speed power __current_speed def __init__ ( self , ini_brand , ini_speed , ini_power ){ self . brand = ini_brand self . max_speed = ini_speed self . power = ini_power } Comments If the section of code is not clearly understandable there should be a short description of the current function in form of a comment. Example # divides up two double values def division ( dividend : float , divisor : float ) -> float : return ( dividend / divisor ) Documentation: The documentation of the written code is created automatically. To provide the needed Information every function, class or method needs a docstring with a special format. Example: def some_function ( some_variable : int ) -> int : \"\"\" <Description> Arguments: some_variable: <Description> Returns: <Description \"\"\" Head of File: In order to get quick information about the .py files purpose there should be a docstring at the beginning of the file. Example: #!/usr/bin/env python3 \"\"\" Created: <MM/DD/YY> by: <Author> <Description> \"\"\"","title":"Python"},{"location":"coding-style/python/#python-coding-style","text":"Next to consistency as a main aspect of good code, the second most important aspect is a certain style which the average python programmer is capable to read and understand properly. Therefore the following documents states the essential naming conventions. Here is a link for a more detailed dive into the `PEP8 - Style Guide for Python Code'","title":"Python Coding Style"},{"location":"coding-style/python/#naming-conventions","text":"","title":"Naming conventions"},{"location":"coding-style/python/#variables","text":"The name of a variable should be as accurate as possible and as short as possible at the same time. Example: # don't x x = 10 + 5 # do res res = 10 + 5 A variable can be used in two different scenarios. Global variables are defined outside of all functions, usually on top of the program. They should only be used if absolutely necessary. A global variable will hold their value throughout the lifetime of the program. Global variables should be defined in a snake_case style, when possible at the start of the file. If the variable should only be used in it's module the name should start and end with two underscores. Example: global_variable __private_global_variable__ Local variables are defined, initially set and consumed within a function, method or block. These variables lifetime is confined within the lifetime (time of execution) of a function (method or block). Local variables should be defined the same way as global variables. local_variable","title":"Variables"},{"location":"coding-style/python/#constants","text":"Constants are expressions with a fixed value. They are defined on a global (modul) level. The naming convention for constants prescribes that all letters are upper case letters with snake case subdivision Example: PI_VALUE = 3.14159","title":"Constants"},{"location":"coding-style/python/#functions","text":"Functions should be named in snake_case like variables. Eventhough Python isn't strictly typesafe it ist good practice to define a return-type and the type of the parameters Example: def example_function ( some_value : int ) -> bool : # do some stuff","title":"Functions"},{"location":"coding-style/python/#classes-types-template-parameters","text":"Python is a object-oriented programming language. Therefore it's all about creating objects which contain both data and functions for a certain task. A class as well as an object should be defined with PascalCase notation. Methods and Attributes: The first parameter of the __init__ function should always be called self . Private methods or attributes always start with two underscores. Example: class Car : brand max_speed power __current_speed def __init__ ( self , ini_brand , ini_speed , ini_power ){ self . brand = ini_brand self . max_speed = ini_speed self . power = ini_power }","title":"Classes (Types, Template parameters)"},{"location":"coding-style/python/#comments","text":"If the section of code is not clearly understandable there should be a short description of the current function in form of a comment. Example # divides up two double values def division ( dividend : float , divisor : float ) -> float : return ( dividend / divisor ) Documentation: The documentation of the written code is created automatically. To provide the needed Information every function, class or method needs a docstring with a special format. Example: def some_function ( some_variable : int ) -> int : \"\"\" <Description> Arguments: some_variable: <Description> Returns: <Description \"\"\" Head of File: In order to get quick information about the .py files purpose there should be a docstring at the beginning of the file. Example: #!/usr/bin/env python3 \"\"\" Created: <MM/DD/YY> by: <Author> <Description> \"\"\"","title":"Comments"}]}